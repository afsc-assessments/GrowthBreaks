[{"path":"https://afsc-assessments.github.io/growthbreaks/articles/getting_started.html","id":"loading-viewing-your-data","dir":"Articles","previous_headings":"","what":"Loading & viewing your data","title":"Getting Started","text":"example shown include spatial process giving rise heterogeneity fish length--age predominant north-south cline. first step ensure data formatted correctly aware sample size issues. accomplished via check_data(), returns plots observations residuals. first plot (p[[1]]) shows input data:  second two plots p[[2]];p[[3]] maps observations simple residuals (observation - age-specific mean). red colors highest values.  passed step ready investigate potential breakpoints length--age via get_Breaks(). example use default option axes = 0 looks spatial breakpoints . function ignorant underlying structure data fitting growth curves time. keep default settings get back plots hypothesized breaks well dataframe breakpoints.","code":"library(growthbreaks) data(simulated_data) ## from the package head(simulated_data) #>   year age    length      lat      long #> 2    1   1  5.174880 56.97959 -156.2602 #> 3    1   1  6.532786 57.34694 -142.2419 #> 5    1   2  9.067383 56.61224 -151.8233 #> 7    1   2 13.178737 67.63265 -169.8984 #> 8    1   2 16.415712 55.14286 -169.2174 #> 9    1   2 19.372655 51.46939 -148.3869 p <- check_data(simulated_data, showPlot = TRUE)"},{"path":"https://afsc-assessments.github.io/growthbreaks/articles/getting_started.html","id":"detecting-breakpoints-with-get_breaks","dir":"Articles","previous_headings":"","what":"Detecting Breakpoints with get_Breaks()","title":"Getting Started","text":"ages_to_use argument allows specify subset age observations ’d like test breakpoints. unsure, may choose use age(s) well sampled data. However, want include least observations small (young) fish, since discrepancies size may less obvious fish near asymptotic length. testing three ages saving output dataframe called breakpoints. Based raw observations, ’d probably expect see break somewhere towards north, sure enough detected break 66deg\\degN.","code":"breakpoints <- get_Breaks(dat = simulated_data, ages_to_use = c(5,10,15), sex = FALSE, axes = 0, showPlot = TRUE) breakpoints #>         lat      long detected_break     count #> 87 65.63636 -141.4534           TRUE 0.3333333"},{"path":"https://afsc-assessments.github.io/growthbreaks/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Maia S. Kapur. Maintainer.","code":""},{"path":"https://afsc-assessments.github.io/growthbreaks/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kapur MS (2024). growthbreaks: Spatio-temporal Growth Anomaly Detection. R package version 0.1.0, https://afsc-assessments.github.io/growthbreaks/.","code":"@Manual{,   title = {growthbreaks: Spatio-temporal Growth Anomaly Detection},   author = {Maia S. Kapur},   year = {2024},   note = {R package version 0.1.0},   url = {https://afsc-assessments.github.io/growthbreaks/}, }"},{"path":"https://afsc-assessments.github.io/growthbreaks/index.html","id":"growthbreaks","dir":"","previous_headings":"","what":"Spatio-temporal Growth Anomaly Detection","title":"Spatio-temporal Growth Anomaly Detection","text":"package designed implement GAM-based breakpoint detection method developed tested Kapur et al. (2019).","code":""},{"path":"https://afsc-assessments.github.io/growthbreaks/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Spatio-temporal Growth Anomaly Detection","text":"remotes::install_github('afsc-assessments/growthbreaks')","code":""},{"path":"https://afsc-assessments.github.io/growthbreaks/index.html","id":"vignettes","dir":"","previous_headings":"","what":"Vignettes","title":"Spatio-temporal Growth Anomaly Detection","text":"Check vignettes via vignette('growthbreaks') read Articles available https://afsc-assessments.github.io/growthbreaks/.","code":""},{"path":"https://afsc-assessments.github.io/growthbreaks/reference/Deriv.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate first derivative of GAM smooth(s), adapted from Gavin Simpson. — Deriv","title":"Evaluate first derivative of GAM smooth(s), adapted from Gavin Simpson. — Deriv","text":"Evaluate first derivative GAM smooth(s), adapted Gavin Simpson.","code":""},{"path":"https://afsc-assessments.github.io/growthbreaks/reference/Deriv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate first derivative of GAM smooth(s), adapted from Gavin Simpson. — Deriv","text":"","code":"Deriv(mod, n = 200, eps = 1e-04, newdata, term)"},{"path":"https://afsc-assessments.github.io/growthbreaks/reference/Deriv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate first derivative of GAM smooth(s), adapted from Gavin Simpson. — Deriv","text":"mod output mgcv::gam() n number intervals evaluate smooth. default 200. eps tolerance threshold. default 1e-4. newdata optional; data.frame new smooth parameters evaluate term string smooth name, .e. \"year\". must match values mod newdata","code":""},{"path":"https://afsc-assessments.github.io/growthbreaks/reference/Deriv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate first derivative of GAM smooth(s), adapted from Gavin Simpson. — Deriv","text":"vector derivative values length n","code":""},{"path":"https://afsc-assessments.github.io/growthbreaks/reference/check_Deriv.html","id":null,"dir":"Reference","previous_headings":"","what":"Check whether the CI of the derivative includes zero or not — check_Deriv","title":"Check whether the CI of the derivative includes zero or not — check_Deriv","text":"Check whether CI derivative includes zero ","code":""},{"path":"https://afsc-assessments.github.io/growthbreaks/reference/check_Deriv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check whether the CI of the derivative includes zero or not — check_Deriv","text":"","code":"check_Deriv(x, d, upper, lower, eval = 0, crit.eval)"},{"path":"https://afsc-assessments.github.io/growthbreaks/reference/check_Deriv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check whether the CI of the derivative includes zero or not — check_Deriv","text":"x vector values derivatives evaluated d vector output Deriv() upper upper confidence interval; output confint_Deriv() lower lower confidence interval; output confint_Deriv() eval value like examine. default 0","code":""},{"path":"https://afsc-assessments.github.io/growthbreaks/reference/check_Deriv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check whether the CI of the derivative includes zero or not — check_Deriv","text":"vector confidence intervals length object.","code":""},{"path":"https://afsc-assessments.github.io/growthbreaks/reference/check_data.html","id":null,"dir":"Reference","previous_headings":"","what":"load, check and plot input data for use in breakpoint detection — check_data","title":"load, check and plot input data for use in breakpoint detection — check_data","text":"load, check plot input data use breakpoint detection","code":""},{"path":"https://afsc-assessments.github.io/growthbreaks/reference/check_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"load, check and plot input data for use in breakpoint detection — check_data","text":"","code":"check_data(dat, sex = FALSE, showPlot = TRUE)"},{"path":"https://afsc-assessments.github.io/growthbreaks/reference/check_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"load, check and plot input data for use in breakpoint detection — check_data","text":"dat data.frame columns year, age, length, sex (optional) sex logical. data frame include sex column? showPlot logical. want visualize input data?","code":""},{"path":"https://afsc-assessments.github.io/growthbreaks/reference/check_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"load, check and plot input data for use in breakpoint detection — check_data","text":"plots","code":""},{"path":[]},{"path":"https://afsc-assessments.github.io/growthbreaks/reference/confint_Deriv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate confidence interval of derivative, adapted from Gavin Simpson. — confint_Deriv","text":"","code":"confint_Deriv(object, term, alpha = 0.05, ...)"},{"path":"https://afsc-assessments.github.io/growthbreaks/reference/confint_Deriv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate confidence interval of derivative, adapted from Gavin Simpson. — confint_Deriv","text":"object vector output Deriv() term string smooth name, .e. \"year\". must match values mod newdata alpha confidence threshold. default 0.05 (95 vector confidence intervals length object.   Calculate confidence interval derivative, adapted Gavin Simpson.","code":""},{"path":"https://afsc-assessments.github.io/growthbreaks/reference/get_Breaks.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper function to to fit gams & evaluate first derivatives — get_Breaks","title":"Wrapper function to to fit gams & evaluate first derivatives — get_Breaks","text":"Wrapper function fit gams & evaluate first derivatives","code":""},{"path":"https://afsc-assessments.github.io/growthbreaks/reference/get_Breaks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper function to to fit gams & evaluate first derivatives — get_Breaks","text":"","code":"get_Breaks(dat, ages_to_use = c(5, 10), sex = FALSE, axes = 0, showPlot = TRUE)"},{"path":"https://afsc-assessments.github.io/growthbreaks/reference/get_Breaks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper function to to fit gams & evaluate first derivatives — get_Breaks","text":"dat data.frame columns year, age, length, lat, long, sex (optional) ages_to_use optional. vector age(s) evaluate breakpoints. sex logical. axes want evaluate axes space (0, default), time (1), simultaneously (2)? showPlot logical. want see detected break(s) map? Applicable axes options 0 2.","code":""},{"path":"https://afsc-assessments.github.io/growthbreaks/reference/get_Breaks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper function to to fit gams & evaluate first derivatives — get_Breaks","text":"matrix detected breakpoints plots","code":""},{"path":"https://afsc-assessments.github.io/growthbreaks/reference/get_Breaks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrapper function to to fit gams & evaluate first derivatives — get_Breaks","text":"","code":"if (FALSE)  data(simulated_data) ;get_Breaks(dat = simulated_data, ages_to_use = c(15:20), axes = 0) #> Error in dat %>% group_by(age) %>% group_split(): could not find function \"%>%\"  # \\dontrun{}"},{"path":"https://afsc-assessments.github.io/growthbreaks/reference/hello.html","id":null,"dir":"Reference","previous_headings":"","what":"Hello, World! — hello","title":"Hello, World! — hello","text":"Prints 'Hello, world!'.","code":""},{"path":"https://afsc-assessments.github.io/growthbreaks/reference/hello.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hello, World! — hello","text":"","code":"hello()"},{"path":"https://afsc-assessments.github.io/growthbreaks/reference/hello.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hello, World! — hello","text":"","code":"hello() #> Error in hello(): could not find function \"hello\""},{"path":"https://afsc-assessments.github.io/growthbreaks/reference/refit_Growth.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to re-fit growth data at putative breaks and return estimates for validation — refit_Growth","title":"Function to re-fit growth data at putative breaks and return estimates for validation — refit_Growth","text":"Function re-fit growth data putative breaks return estimates validation","code":""},{"path":"https://afsc-assessments.github.io/growthbreaks/reference/refit_Growth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to re-fit growth data at putative breaks and return estimates for validation — refit_Growth","text":"","code":"refit_Growth(dat = simulated_data, breakpoints, selex = FALSE, showPlot = TRUE)"},{"path":"https://afsc-assessments.github.io/growthbreaks/reference/refit_Growth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to re-fit growth data at putative breaks and return estimates for validation — refit_Growth","text":"dat data.frame columns year, age, length, lat, long, sex (optional) breakpoints data.frame columns year /lat long. can output get_Breaks. showPlot logical. want see plots fitted curves?","code":""},{"path":"https://afsc-assessments.github.io/growthbreaks/reference/refit_Growth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to re-fit growth data at putative breaks and return estimates for validation — refit_Growth","text":"Von B growth parameters input breakpoints; plots uncertainty growth curves","code":""}]
